namespace EntityFrameworkCore.FSharp.Migrations.Design

open System

open Microsoft.EntityFrameworkCore.Design
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Migrations.Design

open EntityFrameworkCore.FSharp.EntityFrameworkExtensions
open EntityFrameworkCore.FSharp.IndentedStringBuilderUtilities

type FSharpMigrationsGeneratorDependencies
    (
        fSharpHelper: ICSharpHelper,
        fSharpMigrationOperationGenerator: ICSharpMigrationOperationGenerator,
        fSharpSnapshotGenerator: ICSharpSnapshotGenerator
    ) =

    member __.FSharpHelper = fSharpHelper
    member __.FSharpMigrationOperationGenerator = fSharpMigrationOperationGenerator
    member __.FSharpSnapshotGenerator = fSharpSnapshotGenerator

type FSharpMigrationsGenerator(dependencies, fSharpDependencies: FSharpMigrationsGeneratorDependencies) =
    inherit MigrationsCodeGenerator(dependencies)

    let code = fSharpDependencies.FSharpHelper

    let generator =
        fSharpDependencies.FSharpMigrationOperationGenerator

    let snapshot =
        fSharpDependencies.FSharpSnapshotGenerator

    // Due to api shape we're currently forced to work around the fact EF expects 2 files per migration
    let mutable tempUpOperations = list.Empty
    let mutable tempDownOperations = list.Empty
    let mutable tempMigrationName = String.Empty

    let getDefaultNamespaces (contextType: Type) =
        seq {
            "System"
            "Microsoft.EntityFrameworkCore"
            "Microsoft.EntityFrameworkCore.Infrastructure"
            "Microsoft.EntityFrameworkCore.Metadata"
            "Microsoft.EntityFrameworkCore.Migrations"
            "Microsoft.EntityFrameworkCore.Storage.ValueConversion"

            if contextType.Namespace
               |> String.IsNullOrEmpty
               |> not then
                contextType.Namespace
        }
        |> Seq.toList

    member private this.GenerateMigrationImpl
        (migrationNamespace)
        (migrationName)
        (migrationId: string)
        (contextType: Type)
        (upOperations)
        (downOperations)
        (model)
        =
        let sb = IndentedStringBuilder()

        let allOperations =
            (upOperations |> Seq.append downOperations)

        let operationNamespaces =
            this.GetNamespaces allOperations |> Seq.toList

        let namespaces =
            (getDefaultNamespaces contextType
             @ operationNamespaces)
            |> sortNamespaces
            |> Seq.distinct

        sb
        |> appendAutoGeneratedTag
        |> append "namespace "
        |> appendLine (code.Namespace [| migrationNamespace |])
        |> appendEmptyLine
        |> writeNamespaces namespaces
        |> appendEmptyLine
        |> appendLine (sprintf "[<DbContext(typeof<%s>)>]" (contextType |> code.Reference))
        |> appendLine (sprintf "[<Migration(%s)>]" (migrationId |> code.Literal))
        |> appendLine (sprintf "type %s() =" (migrationName |> code.Identifier))
        |> incrementIndent
        |> appendLine "inherit Migration()"
        |> appendEmptyLine
        |> appendLine "override this.Up(migrationBuilder:MigrationBuilder) ="
        |> incrementIndent
        |> ignore

        // Up operations
        generator.Generate("migrationBuilder", upOperations, sb)

        sb
        |> appendEmptyLine
        |> unindent
        |> appendLine "override this.Down(migrationBuilder:MigrationBuilder) ="
        |> incrementIndent
        |> ignore

        // Down operations
        generator.Generate("migrationBuilder", downOperations, sb)

        sb
        |> unindent
        |> appendEmptyLine
        |> appendLine "override this.BuildTargetModel(modelBuilder: ModelBuilder) ="
        |> incrementIndent
        |> ignore

        snapshot.Generate("modelBuilder", model, sb)

        sb |> appendEmptyLine |> string

    member private this.GenerateSnapshotImpl
        (modelSnapshotNamespace: string)
        (contextType: Type)
        (modelSnapshotName: string)
        (model: IModel)
        =
        let sb = IndentedStringBuilder()

        let modelNamespaces = this.GetNamespaces model |> Seq.toList

        let namespaces =
            (getDefaultNamespaces contextType @ modelNamespaces)
            |> sortNamespaces
            |> Seq.distinct

        sb
        |> appendAutoGeneratedTag
        |> append "namespace "
        |> appendLine (code.Namespace [| modelSnapshotNamespace |])
        |> appendEmptyLine
        |> writeNamespaces namespaces
        |> appendEmptyLine
        |> appendLine (sprintf "[<DbContext(typeof<%s>)>]" (code.Reference contextType))
        |> appendLine (sprintf "type %s() =" (code.Identifier modelSnapshotName))
        |> incrementIndent
        |> appendLine "inherit ModelSnapshot()"
        |> appendEmptyLine
        |> appendLine "override this.BuildModel(modelBuilder: ModelBuilder) ="
        |> incrementIndent
        |> ignore

        snapshot.Generate("modelBuilder", model, sb)

        sb |> appendEmptyLine |> unindent |> string

    override __.Language = "F#"
    override __.FileExtension = ".fs"

    // Defined in the order of when it's called during migration add
    override this.GenerateMigration(migrationNamespace, migrationName, upOperations, downOperations) =
        tempUpOperations <- Seq.toList upOperations
        tempDownOperations <- Seq.toList downOperations
        tempMigrationName <- migrationName
        "// intentionally empty"

    override this.GenerateMetadata(migrationNamespace, contextType, migrationName, migrationId, targetModel) =
        if tempMigrationName = migrationName then
            this.GenerateMigrationImpl
                migrationNamespace
                migrationName
                migrationId
                contextType
                tempUpOperations
                tempDownOperations
                targetModel
        else
            invalidOp
                "Migration isn't the same as previously saved during GenerateMigration, DEV: did the order of operations change?"

    override this.GenerateSnapshot(modelSnapshotNamespace, contextType, modelSnapshotName, model) =
        this.GenerateSnapshotImpl modelSnapshotNamespace contextType modelSnapshotName model
